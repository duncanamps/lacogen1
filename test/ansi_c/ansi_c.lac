/*---------------------------------------------------------------------

ansi_c.lac

Based on the BNF grammar at the following page:
http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf
			
---------------------------------------------------------------------*/

%title        = "LaCoGen ANSI C";
%version      = "0";
%author       = "Duncan Munro";
%codeprefix   = "C";
%start        = <translation_unit>;


// ====================================================================
// Character sets
// ====================================================================

{Digit}          = [0-9];
{Letter}         = [A-Za-z];
{Printable}      = [\x20-\x7e];

// Now the other character sets and terminals

{Hex Digit}      = {Digit} + [abcdefABCDEF];
{Oct Digit}      = [01234567];

{ID Head}        = {Letter} + [_];
{ID Tail}        = {ID Head} + {Digit};

{String Ch}      = {Printable} - ["];
{Char Ch}        = {Printable} - [''];
{WSChar}		 = [\t\r\n ];

{Compilable}     = {Printable} + {WSChar};
{Non Asterisk}   = {Compilable} - [*];
{Non SlashAst}   = {Compilable} - [*/];
{Non Linebreak}  = {Compilable} - [\r\n];


// ====================================================================
// Terminals
// ====================================================================

// Keywords 

K_AUTO 		= "auto" 		keyword ;
K_CASE		= "case"		keyword ;
K_CHAR		= "char"		keyword ;
K_CONST		= "const"		keyword ;
K_DEFAULT	= "default"		keyword ;
K_DO		= "do"			keyword ;
K_DOUBLE	= "double"		keyword ;
K_ELSE		= "else"		keyword ;
K_ENUM		= "enum"		keyword ;
K_EXTERN	= "extern"		keyword ;
K_FLOAT		= "float"		keyword ;
K_FOR		= "for"			keyword ;
K_IF		= "if"			keyword ;
K_INT		= "int"			keyword ;
K_LONG		= "long"		keyword ;
K_REGISTER	= "register"	keyword ;
K_SIGNED	= "signed"		keyword ;
K_SHORT		= "short"		keyword ;
K_STATIC	= "static"		keyword ;
K_STRUCT	= "struct"		keyword ;
K_SWITCH	= "switch"		keyword ;
K_TYPEDEF	= "typedef"		keyword ;
K_UNION		= "union"		keyword ;
K_UNSIGNED	= "unsigned"	keyword ;
K_VOID		= "void"		keyword ;
K_VOLATILE	= "volatile"	keyword ;
K_WHILE		= "while"		keyword ;

// Other terminals 

DecLiteral       = [123456789]{Digit}*;
OctLiteral       = "0"{Oct Digit}*;
HexLiteral       = "0x"{Hex Digit}+;
FloatLiteral     = {Digit}*"."{Digit}+;

StringLiteral    = ["]( {String Ch} | [\x5c]{Printable} )* ["];
CharLiteral      = ['] ( {Char Ch} | [\x5c]{Printable} ) ['];

ID               = {ID Head}{ID Tail}*;

Whitespace       = {WSChar}+ ignore;

BlockComment     = "/*" ( {Non Asterisk}* [*]+ {Non SlashAst} )* {Non Asterisk}* [*]+ "/" ignore;
LineComment      = "//" {Non Linebreak}* ([\r] [\n] | [\r] | [\n]) ignore;


// ====================================================================
// Rules
// ====================================================================

<translation_unit>	: <external_decl>
			| <translation_unit> <external_decl>
			;
			
<external_decl>		: <function_definition>
			| <decl>
			;
			
<function_definition>	: <decl_specs> <declarator> <decl_list> <compound_stat>
			|		<declarator> <decl_list> <compound_stat>
			| <decl_specs> <declarator>		<compound_stat>
			|		<declarator> 	<compound_stat>
			;
			
<decl>			: <decl_specs> <init_declarator_list> ";"
			| <decl_specs>			";"
			;
			
<decl_list>		: <decl>
			| <decl_list> <decl>
			;
			
<decl_specs>		: <storage_class_spec> <decl_specs>
			| <storage_class_spec>
			| <type_spec> <decl_specs>
			| <type_spec>
			| <type_qualifier> <decl_specs>
			| <type_qualifier>
			;
			
<storage_class_spec>	: K_AUTO | K_REGISTER | K_STATIC | K_EXTERN | K_TYPEDEF
			;
			
<type_spec>		: K_VOID | K_CHAR | K_SHORT | K_INT | K_LONG | K_FLOAT
			| K_DOUBLE | K_SIGNED | K_UNSIGNED
			| <struct_or_union_spec>
			| <enum_spec>
			| <typedef_name>
			;
			
<type_qualifier>		: K_CONST | K_VOLATILE
			;
			
<struct_or_union_spec>	: <struct_or_union> ID "{" <struct_decl_list> "}"
			| <struct_or_union>	"{" <struct_decl_list> "}"
			| <struct_or_union> ID
			;
			
<struct_or_union>		: K_STRUCT | K_UNION
			;
			
<struct_decl_list>	: <struct_decl>
			| <struct_decl_list> <struct_decl>
			;
			
<init_declarator_list>	: <init_declarator>
			| <init_declarator_list> "," <init_declarator>
			;
			
<init_declarator>		: <declarator>
			| <declarator> "=" <initializer>
			;
			
<struct_decl>		: <spec_qualifier_list> <struct_declarator_list> ";"
			;
			
<spec_qualifier_list>	: <type_spec> <spec_qualifier_list>
			| <type_spec>
			| <type_qualifier> <spec_qualifier_list>
			| <type_qualifier>
			;
			
<struct_declarator_list>	: <struct_declarator>
			| <struct_declarator_list> "," <struct_declarator>
			;
			
<struct_declarator>	: <declarator>
			| <declarator> ":" <const_exp>
			|		":" <const_exp>
			;
			
<enum_spec>		: K_ENUM ID "{" <enumerator_list> "}"
			| K_ENUM	"{" <enumerator_list> "}"
			| K_ENUM ID
			;
			
<enumerator_list>		: <enumerator>
			| <enumerator_list> "," <enumerator>
			;
			
<enumerator>		: ID
			| ID "=" <const_exp>
			;
			
<declarator>		: <pointer> <direct_declarator>
			|	<direct_declarator>
			;
			
<direct_declarator>	: ID
			| "(" <declarator> ")"
			| <direct_declarator> "[" <const_exp> "]"
			| <direct_declarator> "[" "]"
			| <direct_declarator> "(" <param_type_list> ")"
			| <direct_declarator> "(" <id_list> ")"
			| <direct_declarator> "(" ")"
			;
			
<pointer>			: "*" <type_qualifier_list>
			| "*"
			| "*" <type_qualifier_list> <pointer>
			| "*"			<pointer>
			;
			
<type_qualifier_list>	: <type_qualifier>
			| <type_qualifier_list> <type_qualifier>
			;
			
<param_type_list>		: <param_list>
			| <param_list> "," "..."
			;
			
<param_list>		: <param_decl>
			| <param_list> "," <param_decl>
			;
<param_decl>		: <decl_specs> <declarator>
			| <decl_specs> <abstract_declarator>
			| <decl_specs>
			;
			
<id_list>			: ID
			| <id_list> "," ID
			;
			
<initializer>		: <assignment_exp>
			| "{" <initializer_list> "}"
			| "{" <initializer_list> "," "}"
			;
			
<initializer_list>	: <initializer>
			| <initializer_list> "," <initializer>
			;
			
<type_name>		: <spec_qualifier_list> <abstract_declarator>
			| <spec_qualifier_list>
			;
			
<abstract_declarator>	: <pointer>
			| <pointer> <direct_abstract_declarator>
			|	<direct_abstract_declarator>
			;
			
<direct_abstract_declarator>: "(" <abstract_declarator> ")"
			| <direct_abstract_declarator> "[" <const_exp> "]"
			|				"[" <const_exp> "]"
			| <direct_abstract_declarator> "["	"]"
			|				"["	"]"
			| <direct_abstract_declarator> "(" <param_type_list> ")"
			|				"(" <param_type_list> ")"
			| <direct_abstract_declarator> "("		")"
			|				"("		")"
			;
			
<typedef_name>		: ID
			;
			
<stat>			: <labeled_stat>
			| <exp_stat>
			| <compound_stat>
			| <selection_stat>
			| <iteration_stat>
			| <jump_stat>
			;
			
<labeled_stat>		: ID ":" <stat>
			| K_CASE <const_exp> ":" <stat>
			| K_DEFAULT ":" <stat>
			;
			
<exp_stat>		: <exp> ";"
			|	";"
			;
			
<compound_stat>		: "{" <decl_list> <stat_list> "}"
			| "{"		<stat_list> "}"
			| "{" <decl_list>		"}"
			| "{"			"}"
			;
			
<stat_list>		: <stat>
			| <stat_list> <stat>
			;
			
<selection_stat>		: K_IF "(" <exp> ")" <stat>
			| K_IF "(" <exp> ")" <stat> K_ELSE <stat>
			| K_SWITCH "(" <exp> ")" <stat>
			;
			
<iteration_stat>		: K_WHILE "(" <exp> ")" <stat>
			| K_DO <stat> K_WHILE "(" <exp> ")" ";"
			| K_FOR "(" <exp> ";" <exp> ";" <exp> ")" <stat>
			| K_FOR "(" <exp> ";" <exp> ";"	")" <stat>
			| K_FOR "(" <exp> ";"	";" <exp> ")" <stat>
			| K_FOR "(" <exp> ";"	";"	")" <stat>
			| K_FOR "("	";" <exp> ";" <exp> ")" <stat>
			| K_FOR "("	";" <exp> ";"	")" <stat>
			| K_FOR "("	";"	";" <exp> ")" <stat>
			| K_FOR "("	";"	";"	")" <stat>
			;
<jump_stat>		: K_GOTO ID ";"
			| K_CONTINUE ";"
			| K_BREAK ";"
			| K_RETURN <exp> ";"
			| K_RETURN	";"
			;
<exp>			: <assignment_exp>
			| <exp> "," <assignment_exp>
			;
			
<assignment_exp>		: <conditional_exp>
			| <unary_exp> <assignment_operator> <assignment_exp>
			;
			
<assignment_operator>	: "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<="
			| ">>=" | "&=" | "^=" | "|="
			;
			
<conditional_exp>		: <logical_or_exp>
			| <logical_or_exp> "?" <exp> ":" <conditional_exp>
			;
			
<const_exp>		: <conditional_exp>
			;
			
<logical_or_exp>		: <logical_and_exp>
			| <logical_or_exp> "||" <logical_and_exp>
			;
			
<logical_and_exp>		: <inclusive_or_exp>
			| <logical_and_exp> "&&" <inclusive_or_exp>
			;
			
<inclusive_or_exp>	: <exclusive_or_exp>
			| <inclusive_or_exp> "|" <exclusive_or_exp>
			;
			
<exclusive_or_exp>	: <and_exp>
			| <exclusive_or_exp> "^" <and_exp>
			;
			
<and_exp>			: <equality_exp>
			| <and_exp> "&" <equality_exp>
			;
			
<equality_exp>		: <relational_exp>
			| <equality_exp> "==" <relational_exp>
			| <equality_exp> "!=" <relational_exp>
			;
			
<relational_exp>		: <shift_expression>
			| <relational_exp> "<"  <shift_expression>
			| <relational_exp> ">"  <shift_expression>
			| <relational_exp> "<=" <shift_expression>
			| <relational_exp> ">=" <shift_expression>
			;
			
<shift_expression>	: <additive_exp>
			| <shift_expression> "<<" <additive_exp>
			| <shift_expression> ">>" <additive_exp>
			;
			
<additive_exp>		: <mult_exp>
			| <additive_exp> "+" <mult_exp>
			| <additive_exp> "-" <mult_exp>
			;
			
<mult_exp>		: <cast_exp>
			| <mult_exp> "*" <cast_exp>
			| <mult_exp> "/" <cast_exp>
			| <mult_exp> "%" <cast_exp>
			;
			
<cast_exp>		: <unary_exp>
			| "(" <type_name> ")" <cast_exp>
			;
			
<unary_exp>		: <postfix_exp>
			| "++" <unary_exp>
			| "--" <unary_exp>
			| <unary_operator> <cast_exp>
			| K_SIZEOF <unary_exp>
			| K_SIZEOF "(" <type_name> ")"
			;
			
<unary_operator>		: "&" | "*" | "+" | "-" | "~" | "!"
			;
			
<postfix_exp>		: <primary_exp>
			| <postfix_exp> "[" <exp> "]"
			| <postfix_exp> "(" <argument_exp_list> ")"
			| <postfix_exp> "("			")"
			| <postfix_exp> "." ID
			| <postfix_exp> "->" ID
			| <postfix_exp> "++"
			| <postfix_exp> "--"
			;
			
<primary_exp>		: ID
			| <const>
			| StringLiteral
			| "(" <exp> ")"
			;
<argument_exp_list>	: <assignment_exp>
			| <argument_exp_list> "," <assignment_exp>
			;
<const>			: <int_const>
			| CharLiteral
			| FloatLiteral
//			| <enumeration_const>
			;
			
<int_const> : DecLiteral
			| OctLiteral      
			| HexLiteral
			;
