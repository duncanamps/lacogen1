//======================================================================
//
//  6502 Macro Assembler Grammar
//
//  Duncan Munro
//  20/12/2019
//
//======================================================================

%title		= "6502 Macro Assembler Grammar";
%version	= "0.1";
%author		= "Duncan Munro";  
%start		= <assembler_line>;
           

//
// Predefined sets
//

{Tab} 			= [\t];
{Space}			= [ ];
{Digit} 		= [0-9];
{Letter} 		= [A-Za-z];
{Whitespace} 	= {Space} + {Tab};
{Printable}		= [\x20-\x7e];

     
//
// Character set definitions
//

{DigitBin}		= [01];
{DigitHex}		= {Digit} + [ABCDEFabcdef];
{DigitNonZero}	= [123456789];
{DigitOct}		= [01234567];
{Backslash}     = [\x5c];
{Escaped}       = [\x5c\x22tnr];
{DQuote}		= [\x22];
{StringChar}	= {Printable} - {DQuote} - {Backslash} + {Tab};
{CommentChar}	= {Printable} + {Tab};
{NonCurlyChar}	= {Printable} + {Tab} - [}];

{SymbolStart}	= {Letter} + [_];
{SymbolMid}		= {SymbolStart} + {Digit};                                    
              

//
// Terminal definitions
//

// Opcodes

OPCODE	= MIXED("ADC")
		| MIXED("AND")
		| MIXED("ASL")
		| MIXED("BCC")
		| MIXED("BCS")
		| MIXED("BEQ")
		| MIXED("BIT")
		| MIXED("BMI")
		| MIXED("BNE")
		| MIXED("BPL")
		| MIXED("BRK")
		| MIXED("BVC")
		| MIXED("BVS")
		| MIXED("CLC")
		| MIXED("CLD")
		| MIXED("CLI")
		| MIXED("CLV")
		| MIXED("CMP")
		| MIXED("CPX")
		| MIXED("CPY")
		| MIXED("DEC")
		| MIXED("DEX")
		| MIXED("DEY")
		| MIXED("EOR")
		| MIXED("INC")
		| MIXED("INX")
		| MIXED("INY")
		| MIXED("JMP")
		| MIXED("JSR")
		| MIXED("LDA")
		| MIXED("LDX")
		| MIXED("LDY")
		| MIXED("LSR")
		| MIXED("NOP")
		| MIXED("ORA")
		| MIXED("PHA")
		| MIXED("PHP")
		| MIXED("PLA")
		| MIXED("PLP")
		| MIXED("ROL")
		| MIXED("ROR")
		| MIXED("RTI")
		| MIXED("RTS")
		| MIXED("SBC")
		| MIXED("SEC")
		| MIXED("SED")
		| MIXED("SEI")
		| MIXED("STA")
		| MIXED("STX")
		| MIXED("STY")
		| MIXED("TAX")
		| MIXED("TAY")
		| MIXED("TSX")
		| MIXED("TXA")
		| MIXED("TXS")
		| MIXED("TYA") keyword ;

// Binary

BinAnd           = "&"	symbol ;
BinNot           = "~"	symbol ;                 
BinOr            = "|"	symbol ;
BinXor           = "^"	symbol ;                                  
LeftShift        = "<<"	symbol ;
Modulo           = "%"	symbol ;
RightShift       = ">>"	symbol ;
                                                   
// Comparison

Equal            = "=="	symbol ;
GreaterThan      = ">"	symbol ;
GreaterEqual     = ">="	symbol ;
LessEqual        = "<="	symbol ;                                 
LessThan         = "<"	symbol ;                                  
LogicalAnd       = "&&"	symbol ;                 
LogicalNot       = "!"	symbol ;                 
LogicalOr        = "||"	symbol ;                 
NotEqual         = "!="	symbol ;                 
                 
// Literals

BinLiteral       = "0b"{DigitBin}+;
DecLiteral       = {DigitNonZero}{Digit}*;
HexLiteral       = ( "0x"{DigitHex}+ | "$"{DigitHex}+ )  ;
OctLiteral       = "0"{DigitOct}*;

// Rest of world

Assignment			= "=" symbol;
Accum				= MIXED("A")			keyword;
ComX				= MIXED(",X")			keyword;
ComY				= MIXED(",Y")			keyword;
Force				= MIXED("FORCE")		keyword;
F_ASC				= MIXED("ASC(")			keyword;
F_BUILD				= MIXED("BUILD()")		keyword;
F_CHR				= MIXED("CHR(")			keyword;
F_DATE				= MIXED("DATE()")		keyword;
F_HEX				= MIXED("HEX(")			keyword;
F_HIGH				= MIXED("HIGH(")		keyword;
F_IIF				= MIXED("IIF(")			keyword;
F_LEFT				= MIXED("LEFT(")		keyword;
F_LOW				= MIXED("LOW(")			keyword;
F_LOWER				= MIXED("LOWER(")		keyword;
F_MID				= MIXED("MID(")			keyword;
F_ORG				= MIXED("ORG")			keyword;
F_POS				= MIXED("POS(")			keyword;
F_RIGHT				= MIXED("RIGHT(")		keyword;
F_STRING			= MIXED("STRING(")		keyword;
F_TIME				= MIXED("TIME()")		keyword;
F_UPPER				= MIXED("UPPER(")		keyword;
F_VALUE				= MIXED("VALUE(")		keyword;

K_BYTE				= MIXED(".BYTE")		keyword;
K_DB				= MIXED(".DB")			keyword;
K_DD				= MIXED(".DD")			keyword;
K_DEFINE			= MIXED(".DEFINE")		keyword;
K_DEFINES			= MIXED(".DEFINES")		keyword;
K_DEFMACRO			= MIXED(".DEFMACRO")	keyword;
K_DS				= MIXED(".DS")			keyword;
K_DSH				= MIXED(".DSH")			keyword;
K_DSZ				= MIXED(".DSZ")			keyword;
K_DW				= MIXED(".DW")			keyword;
K_ELSE				= MIXED(".ELSE")		keyword;
K_ENDIF				= MIXED(".ENDIF")		keyword;
K_ENDM				= MIXED(".ENDM")		keyword;
K_EQ				= MIXED(".EQ")			keyword;
K_EQU				= MIXED(".EQU")			keyword;
K_ERROR				= MIXED(".ERROR")		keyword;
K_IF				= MIXED(".IF")			keyword;
K_IFDEF				= MIXED(".IFDEF")		keyword;
K_IFNDEF			= MIXED(".IFNDEF")		keyword;
K_INCLUDE			= MIXED(".INCLUDE")		keyword;
K_LIST				= MIXED(".LIST")		keyword;
K_MESSAGE			= MIXED(".MESSAGE")		keyword;
K_MACRO				= MIXED(".MACRO")		keyword;
K_NOLIST			= MIXED(".NOLIST")		keyword;
K_ORG				= MIXED(".ORG")			keyword;
K_SET				= MIXED(".SET")			keyword;
K_UNDEFINE			= MIXED(".UNDEFINE")	keyword;
K_WARNING			= MIXED(".WARNING")		keyword;

LocalAddress		= "@" {SymbolStart}{SymbolMid}*;
MacroPlaceholder	= "@"{Digit};
StringConstant		= {DQuote} ({StringChar} | {Backslash} {Escaped})* {DQuote};                 
SymbolDef			= {SymbolStart}{SymbolMid}*;   
Whitespace			= {Whitespace}+ ignore;                 
                 


//
// Lexical groups
//

LineComment1		= ";" {CommentChar}* ignore;           
LineComment2		= "//" {CommentChar}* ignore; 
InternalComment1	= "{" {NonCurlyChar}* "}" ignore;


//
// Productions
//

<assembler_line>	: <label> <directive_line>						# ActIgnore
					| <directive_line>								# ActIgnore
					| <label> <instruction>							# ActIgnore
					| <instruction>									# ActIgnore
					| <label>										# ActIgnore
					|												# ActIgnore
					;
                   
<directive_line>	: K_BYTE	 <expression> "," <expression>		# ActDirByte
					| K_DB		 <expression_list>					# ActDirDB
					| K_DD		 <expression_list>					# ActDirDD
					| K_DEFINE	 SymbolDef							# ActDirDefine
					| K_DEFINE	 SymbolDef Assignment <expression>	# ActDirDefineExpr
					| K_DEFINES  SymbolDef Assignment <string_expr> # ActDirDefineString
					| K_DEFMACRO SymbolDef							# ActDirDefmacro
					| K_DS		 <string_expr>						# ActDirDS
					| K_DSH		 <string_expr>						# ActDirDSH
					| K_DSZ		 <string_expr>						# ActDirDSZ
					| K_DW		 <expression_list>					# ActDirDW
					| K_ELSE										# ActDirElse
					| K_ENDIF										# ActDirEndif
					| K_ENDM										# ActDirEndm
					| SymbolDef	 K_EQ <expression>					# ActDirDefineExpr
					| SymbolDef	 K_EQU <expression>					# ActDirDefineExpr
					| K_ERROR	 <string_expr>						# ActDirError
					| K_IF		 <expression>						# ActDirIf
					| K_IFDEF	 SymbolDef							# ActDirIfdef
					| K_IFNDEF	 SymbolDef							# ActDirIfndef
					| K_INCLUDE	 Force <string_expr>				# ActDirIncludeList
					| K_INCLUDE	 <string_expr>						# ActDirInclude
					| K_LIST										# ActDirList
					| K_MACRO	 SymbolDef <expression_list>		# ActDirMacro
					| K_MACRO	 SymbolDef							# ActDirMacroNoexpr
					| K_MESSAGE	 <string_expr>						# ActDirMessage
					| K_NOLIST 										# ActDirNolist
					| K_ORG		 <expression>						# ActDirOrg
					| K_SET		 SymbolDef Assignment <expression>	# ActDirSet
					| K_UNDEFINE SymbolDef							# ActDirUndefine
					| K_WARNING	 <string_expr>						# ActDirWarning
					;

<label>	: LocalAddress												# ActLabelLocal
		| LocalAddress ":"											# ActLabelLocalC
		| SymbolDef													# ActLabel
		| SymbolDef ":"												# ActLabelC
		;

<instruction> : OPCODE <Operand>									# ActInstruction
			;

<Operand>	: "[" <expression> ComX "]"								# ActSetOpIndX
            | "[" <expression> "]" ComY								# ActSetOpIndY
            | "[" <expression> "]"									# ActSetOpInd
            | "#" <expression>										# ActSetOpImmed
            | <expression> ComX										# ActSetOpAbsX
            | <expression> ComY										# ActSetOpAbsY
            | <expression>											# ActSetOpAbs
            | Accum													# ActSetOpA
            |														# ActSetOpImpl 
			;

<expression_list>	: <expression_list> "," <expression>			# ActExprList
					| <expression>									# ActCopy1
					;
                               
<expression>		: <expression> LogicalOr <and_expr>				# ActLogOr
					| <and_expr>									# ActCopy1
					;
               
<and_expr>			: <and_expr> LogicalAnd <binor_expr>			# ActLogAnd
					| <binor_expr>									# ActCopy1
					;
             
<binor_expr>		: <binor_expr> BinOr <binxor_expr>				# ActExprOr
					| <binxor_expr>									# ActCopy1
					;
               
<binxor_expr>		: <binxor_expr> BinXor <binand_expr>			# ActExprXor
					| <binand_expr>									# ActCopy1
					;
                
<binand_expr>		: <binand_expr> BinAnd <equate_expr>			# ActExprAnd
					| <equate_expr>									# ActCopy1
					;
                
<equate_expr>		: <equate_expr> Equal <compare_expr>			# ActCompEQ
					| <equate_expr> NotEqual <compare_expr>			# ActCompNE
					| <compare_expr>								# ActCopy1
					;
                
<compare_expr>		: <compare_expr> LessThan <shift_expr>			# ActCompLT
					| <compare_expr> GreaterThan <shift_expr>		# ActCompGT
					| <compare_expr> LessEqual <shift_expr>			# ActCompLE
					| <compare_expr> GreaterEqual <shift_expr>		# ActCompGE
					| <shift_expr>									# ActCopy1
					;
                 
<shift_expr>		: <shift_expr> LeftShift <add_expr>				# ActExprShl
					| <shift_expr> RightShift <add_expr>			# ActExprShr
					| <add_expr>									# ActCopy1
					;
                 
<add_expr>			: <add_expr> "+" <mult_expr>					# ActExprAdd
					| <add_expr> "-" <mult_expr>					# ActExprSub
					| <mult_expr>									# ActCopy1
					;
                 
<mult_expr>			: <mult_expr> "*" <unary_expr>					# ActExprMul
					| <mult_expr> "/" <unary_expr>					# ActExprDiv
					| <mult_expr> Modulo <unary_expr>				# ActExprMod
					| <unary_expr>									# ActCopy1
					;
                 
<unary_expr>		: "-" <value>									# ActExprMinus
					| LogicalNot <value>							# ActLogNot
					| BinNot <value>								# ActExprNot
					| <value>										# ActCopy1
					;
                 
<value>				: F_ORG											# ActValueOrg
					| HexLiteral									# ActHexLiteral
					| DecLiteral									# ActDecLiteral
					| OctLiteral									# ActOctLiteral
					| BinLiteral									# ActBinLiteral
					| F_ASC <string_expr> ")"						# ActFuncAsc
					| F_HIGH <expression> ")"						# ActFuncHigh
					| F_IIF <expression> "," <expression> "," <expression> ")" # ActFuncIif
					| F_LOW <expression> ")"						# ActFuncLow
					| F_POS <string_expr> "," <string_expr> ")"		# ActFuncPos
					| F_VALUE <string_expr> ")"						# ActFuncValue
					| "(" <expression> ")"							# ActExprBracket
					| SymbolDef										# ActValueSymbol
					| LocalAddress									# ActValueLocal
					| MacroPlaceholder								# ActMacroPlaceholder
					;

<string_expr>		: <string_expr> "+" <string_result>				# ActStrCat
					| <string_result>								# ActCopy1
					;
                
<string_result>		: StringConstant								# ActStringConstant
					| F_BUILD										# ActStrBuild
					| F_CHR <expression> ")"						# ActStrChr
					| F_DATE										# ActStrDate
					| F_HEX <expression> ")"						# ActStrHex1
					| F_HEX <expression> "," <expression> ")"		# ActStrHex2
					| F_LEFT <string_expr> "," <expression> ")"		# ActStrLeft
					| F_LOWER <string_expr> ")"						# ActStrLower
					| F_MID <string_expr> "," <expression> "," <expression> ")"	# ActStrMid
					| F_RIGHT <string_expr> "," <expression> ")"	# ActStrRight
					| F_STRING <expression> ")"						# ActStrString
					| F_TIME										# ActStrTime
					| F_UPPER <string_expr> ")"						# ActStrUpper
					| SymbolDef										# ActStringSymbol
					;  